import locale
import re
import os
import json
from datetime import datetime, date
from typing import Tuple, List, Any, Dict

from aiogram_dialog import DialogManager


def check_valid_url_promo(url_promo: str) -> tuple[list[Any], list[Any]] or ValueError:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–º–ø–∞–Ω–∏—é –≤ –ü—Ä–æ–º–æ–°—Ç—Ä–∞–Ω–∏—Ü–∞—Ö"""
    valid_url = re.compile(r'^(https://promopages.yandex.ru/profile/editor/id/)')
    url = re.findall(valid_url, url_promo)
    if not url:
        raise ValueError
    return url_promo


def check_valid_url_sheet(url_sheet: str) -> tuple[list[Any], list[Any]] or ValueError:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ì—É–≥–ª –¢–∞–±–ª–∏—Ü—É"""
    valid_url = re.compile(r'^(https://docs.google.com/spreadsheets/d/)')
    url = re.findall(valid_url, url_sheet)
    if not url:
        raise ValueError
    return url_sheet


def generated_date_for_report(url):
    '''–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—á–µ—Ç–∞, –∑–∞–±–∏—Ä–∞—è –¥–∞—Ç—ã –ø—Ä—è–º–æ –∏–∑ —É—Ä–ª–∞ –ü—Ä–æ–º–æ–°—Ç—Ä–∞–Ω–∏—Ü'''
    regex = r'\d{10}'
    date = re.findall(regex, url)
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

    start_interval_for_report = datetime.fromtimestamp(int(date[0])).strftime('%d %B').lower()
    end_interval_for_report = datetime.fromtimestamp(int(date[1])).strftime('%d %B').lower()

    return start_interval_for_report, end_interval_for_report


async def create_text_report(report: dict, dialog_manager: DialogManager=None) -> str:
    if "report" in report:
        dict_for_text = report["report"]

    else:
        dict_for_text = {}

    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

    dates_interval = None
    url_sheet = dialog_manager.dialog_data.get('url_sheet')

    start_date = dialog_manager.dialog_data.get("start_date")
    end_date = dialog_manager.dialog_data.get("end_date")

    if isinstance(start_date, date) and isinstance(end_date, date):
        # –ï—Å–ª–∏ –¥–∞—Ç—ã —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏ datetime
        dates_interval = (
            start_date.strftime("%d %B").lower(),
            end_date.strftime("%d %B").lower()
        )

    elif isinstance(start_date, str) and isinstance(end_date, str):
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            start_date_obj = datetime.strptime(start_date, "%Y-%m-%d")  # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: "2023-10-05"
            end_date_obj = datetime.strptime(end_date, "%Y-%m-%d")  # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: "2023-10-10"
            dates_interval = (
                start_date_obj.strftime("%d %B").lower(),
                end_date_obj.strftime("%d %B").lower()
            )

        except ValueError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç: {e}")
            return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."

    try:
        report_text = (f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ—Å—É –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º –≤ –ü—Ä–æ–º–æ–°—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.\n\n"
                       f"–ó–∞ –ø–µ—Ä–∏–æ–¥ c {dates_interval[0]} –ø–æ {dates_interval[1]} –æ—Ç–∫—Ä—É—Ç–∏–ª–∏ "
                       f"{dict_for_text['–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'][1]} ‚ÇΩ –±—é–¥–∂–µ—Ç–∞.\n\n–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∞–∫–∏–µ:\n\n"
                       f"- –î–æ—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –∑–∞ –Ω–µ–¥–µ–ª—é ‚Äî {dict_for_text['–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'][6]} ‚ÇΩ.\n\n"
                       f"- –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ —Å–∞–π—Ç –ø–æ {dict_for_text['–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'][3]} ‚ÇΩ.\n\n"
                       f"- –°—Ä–µ–¥–Ω–∏–π CTR ‚Äî {dict_for_text['–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'][-2]}.\n\n"
                       f"–í—Å–µ–≥–æ –±—ã–ª–æ {dict_for_text['–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'][0]} –ø–æ–∫–∞–∑–æ–≤, "
                       f"{dict_for_text['–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'][5]} –¥–æ—á–∏—Ç—ã–≤–∞–Ω–∏–π –∏ "
                       f"{dict_for_text['–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'][2]} "
                       f"–ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ —Å–∞–π—Ç.\n\n"
                       f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç <a href='{url_sheet}'>–ø–æ —Å—Å—ã–ª–∫–µ</a>")
        return report_text

    except KeyError:
        return ("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –æ—Ç—á–µ—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ωüò¢\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ")


async def create_json_file(filename: str) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç JSON-—Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é "campaigns" —Å –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.

    :param filename: –ò–º—è —Ñ–∞–π–ª–∞ (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(filename):
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            campaigns = {
                "active_campaigns": {}  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è campaigns
            }
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            with open(filename, "w", encoding="utf-8") as file:
                json.dump(campaigns, file, ensure_ascii=False, indent=4)
    except Exception as e:
        pass


def check_interval(text):
    if all(ch.isdigit() for ch in text) and 1 > int(text) > 31:
        return text
    raise ValueError

